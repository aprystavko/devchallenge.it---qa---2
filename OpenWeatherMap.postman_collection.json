{
	"info": {
		"_postman_id": "66911d87-80ea-4b06-b00d-6eec8930d77e",
		"name": "OpenWeatherMap",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Current weather data",
			"description": "",
			"item": [
				{
					"name": "1.1. Positive tests for check current city data",
					"description": "This folder contains positive tests for functionality \"Current weather data\". Link to documentation - https://openweathermap.org/current. Cities are chosen from different continents of the Earth. Because tests need to cover the most different coordinates of the planet.",
					"item": [
						{
							"name": "1.1. By city name = Kiev (Europe)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96c5cb96-c330-4cda-98be-cce18c13e215",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Kiev}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Kiev}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2. By city name = Cape Town (Africa)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0740f86d-49a5-44b2-893b-3f7a7003d012",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(18.42);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.93);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('ZA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Cape Town_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Cape Town\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Cape Town}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Cape Town}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3. By city name = Mumbai (India)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0eaab42-31b3-4d36-a2d8-60c28ae658b4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(72.85);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(19.01);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('IN');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Mumbai_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Mumbai}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Mumbai}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4. By city name = Sydney (Australia)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "634b037f-4a95-4332-a26a-bcb4e1c0b51a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(151.22);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.85);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AU');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Sydney\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Sydney_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Sydney}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Sydney}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5. By city name  = Ottawa (North America)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3902ff6f-5fe6-42cc-8ca9-6ae9eb969d2a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-75.69);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(45.42);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('CA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Ottawa\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Ottawa_id\")));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Ottawa}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Ottawa}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6. By city name = Buenos Aires (South America)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9b54061-a7cf-4a7d-8310-70cfdb8c6fbe",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-58.44);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-34.61);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Buenos Aires\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Buenos Aires_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Buenos Aires}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Buenos Aires}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.7. By city name = Nuuk (Greenland)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57da0427-d544-4248-bdaa-734a4bdb2353",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-51.74);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(64.17);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GL');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Nuuk\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Nuuk_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Nuuk}}{{api_id}}",
									"host": [
										"{{weather_url}}q={{Nuuk}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. By city name, country code = Kiev,ua",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1af272ba-0cd6-489c-9abf-fa1651e010bb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Kiev}},ua{{api_id}}",
									"host": [
										"{{weather_url}}q={{Kiev}},ua{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2. By city name, country code = Cape Town,za",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21903b38-1357-4506-8581-97d73f7f4c61",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(18.42);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.93);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('ZA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Cape Town_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Cape Town\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Cape Town}},za{{api_id}}",
									"host": [
										"{{weather_url}}q={{Cape Town}},za{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.3. By city name, country code = Mumbai,in",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f512b0ea-b153-4fde-abe8-14f4b828a1c3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(72.85);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(19.01);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('IN');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Mumbai_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Mumbai}},in{{api_id}}",
									"host": [
										"{{weather_url}}q={{Mumbai}},in{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4. By city name, country code = Sydney,us",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60022941-30ec-45b0-8e80-65a541697972",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(151.22);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.85);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AU');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Sydney\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Sydney_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Sydney}},au{{api_id}}",
									"host": [
										"{{weather_url}}q={{Sydney}},au{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5. By city name, country code = Ottawa,ca",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "750b651f-8c07-49c4-a905-40b7a3b06c0a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-75.69);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(45.42);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('CA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Ottawa\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Ottawa_id\")));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Ottawa}},ca{{api_id}}",
									"host": [
										"{{weather_url}}q={{Ottawa}},ca{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6. By city name, country code = Buenos Aires,ar",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5123bb7d-6773-4980-b31b-6cbd622a0739",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-58.44);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-34.61);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Buenos Aires\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Buenos Aires_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Buenos Aires}},ar{{api_id}}",
									"host": [
										"{{weather_url}}q={{Buenos Aires}},ar{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.7. By city name, country code = Nuuk,gl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3517dbc-bacf-4dad-8638-edce67dc7d36",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-51.74);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(64.17);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GL');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Nuuk\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Nuuk_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{Nuuk}},gl{{api_id}}",
									"host": [
										"{{weather_url}}q={{Nuuk}},gl{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1. By city ID = 703448 (Kiev)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5eb9df59-3846-48a6-88a0-056996016ca8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Kiev_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Kiev_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2. By city ID = 3369157 (Cape Town)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c16a795e-b021-4523-ae78-e34471d59d48",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(18.42);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.93);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('ZA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Cape Town_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Cape Town\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Cape Town_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Cape Town_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3. By city ID = 1275339 (Mumbai)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a14bf63f-5bf7-4cac-abed-5772dcc488ef",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(72.85);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(19.01);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('IN');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Mumbai_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Mumbai_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Mumbai_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4. By city ID = 2147714 (Sydney)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eafc26dd-6beb-4569-8e05-2847fcb15c73",
										"type": "text/javascript",
										"exec": [
											"// I commented this tests, because i asked support and had a email with answer:",
											"// Yes, the data is correct.",
											"// It seems that there are several weather stations are used for this location.",
											"// We will double check.",
											"// screen of email - https://monosnap.com/file/oyjAPaSmykiDiROLIXz4z6Zzq87w4a#",
											"",
											"//pm.test(\"Expected city lon coordinate is present\", function () {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.coord.lon).to.eql(151.22);",
											"//});",
											"",
											"//pm.test(\"Expected city lat coordinate is present\", function () {",
											"//    var jsonData = pm.response.json();",
											"//    pm.expect(jsonData.coord.lat).to.eql(-33.85);",
											"//});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AU');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Sydney\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Sydney_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Sydney_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Sydney_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5. By city ID = 6094817 (Ottawa)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b492b9a6-f6fc-441e-a078-736a5212800f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-75.69);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(45.42);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('CA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Ottawa\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Ottawa_id\")));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Ottawa_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Ottawa_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6. By city ID = 3435910 (Buenos Aires)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66d99d4b-d4c2-4d85-851a-11241c90a997",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-58.44);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-34.61);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Buenos Aires\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Buenos Aires_id\")));",
											"}); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Buenos Aires_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Buenos Aires_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7. By city ID = 3421319 (Nuuk)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd7a5913-977a-4dee-b169-5092805701d4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-51.74);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(64.17);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GL');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Nuuk\"));",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Nuuk_id\")));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{Nuuk_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id={{Nuuk_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.1. By geographic coordinates lat=50.43, lon=30.52 (Kiev)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bf91763-67e1-4dc5-a2f8-8449d94c3be0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lat=50.43&lon=30.52{{api_id}}",
									"host": [
										"{{weather_url}}lat=50",
										"43&lon=30",
										"52{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.2. By geographic coordinates lon=30.52, lat=50.43 (Kiev) (change place lat and lon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d35294e1-ac51-4e47-928e-3ca19e2b83e0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=30.52&lat=50.43{{api_id}}",
									"host": [
										"{{weather_url}}lon=30",
										"52&lat=50",
										"43{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2. By geographic coordinates lon=18.42, lat=-33.93 (Cape Town)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ea051f-a1f5-4631-995a-494b4e9049e1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(18.42);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.93);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('ZA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Cape Town_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Cape Town\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=18.42&lat=-33.93{{api_id}}",
									"host": [
										"{{weather_url}}lon=18",
										"42&lat=-33",
										"93{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3. By geographic coordinates lon=72.85, lat=19.01 (Mumbai)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b29342e7-f98b-42b8-b640-9093689c0c46",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(72.85);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(19.01);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('IN');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Mumbai_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Mumbai\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=72.85&lat=19.01{{api_id}}",
									"host": [
										"{{weather_url}}lon=72",
										"85&lat=19",
										"01{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4. By geographic coordinates lon=-75.69, lat=-33.87 (Sydney)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e2820b0-9d7a-4324-9cde-ede4dbe1b6ff",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(151.21);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-33.87);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AU');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Sydney_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Sydney_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=151.21&lat=-33.87{{api_id}}",
									"host": [
										"{{weather_url}}lon=151",
										"21&lat=-33",
										"87{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.5. By geographic coordinates lon=-75.69, lat=45.42 (Ottawa)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67a15837-41ad-431f-87fd-a62c587530f2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-75.69);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(45.42);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('CA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Ottawa_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Ottawa\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=-75.69&lat=45.42{{api_id}}",
									"host": [
										"{{weather_url}}lon=-75",
										"69&lat=45",
										"42{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.6. By geographic coordinates lon=-58.44, lat=-34.61 (Buenos Aires)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "757a75ca-668a-4096-9746-6b119b04222c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-58.44);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-34.61);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('AR');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Buenos Aires_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Buenos Aires\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=-58.44&lat=-34.61{{api_id}}",
									"host": [
										"{{weather_url}}lon=-58",
										"44&lat=-34",
										"61{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.7. By geographic coordinates lon=-51.74, lat=64.17 (Nuuk)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "928d10e4-da4d-47a5-b602-1c5717e074b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-51.74);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(64.17);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GL');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Nuuk_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Nuuk\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=-51.74&lat=64.17{{api_id}}",
									"host": [
										"{{weather_url}}lon=-51",
										"74&lat=64",
										"17{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.1. By geographic coordinates lon=0, lat=0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "816c2c95-d6e0-4156-9962-64879b0db174",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(0);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=0&lat=0{{api_id}}",
									"host": [
										"{{weather_url}}lon=0&lat=0{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.2. By geographic coordinates lon=0, lat=-90 (lat min value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8cbfd19-5967-4916-8acb-53d324c7bec3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(0);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(-90);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=0&lat=-90{{api_id}}",
									"host": [
										"{{weather_url}}lon=0&lat=-90{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.3. By geographic coordinates lon=0, lat=90 (lat max value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df2e1525-7e4b-48bd-959a-63a2c27f9f1c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(0);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(90);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=0&lat=90{{api_id}}",
									"host": [
										"{{weather_url}}lon=0&lat=90{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.4. By geographic coordinates lon=-180, lat=0 (lon min value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee5c22b5-7ebb-4ccd-9a3c-eb42dee9eaf1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(-180);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=-180&lat=0{{api_id}}",
									"host": [
										"{{weather_url}}lon=-180&lat=0{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.8.5. By geographic coordinates lon=180, lat=0 (lon max value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9efbc8f-82a7-45e6-8849-bf7892537ba0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(180);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(0);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=180&lat=0{{api_id}}",
									"host": [
										"{{weather_url}}lon=180&lat=0{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1. By zip code  = 10001,us (New York)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f762c152-1e11-494d-8cd1-11abf9de4ca0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('US');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"New York\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=10001,us{{api_id}}",
									"host": [
										"{{weather_url}}zip=10001,us{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2. By zip code  = 10001 (New York) - default zip search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f762c152-1e11-494d-8cd1-11abf9de4ca0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('US');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"New York\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=10001{{api_id}}",
									"host": [
										"{{weather_url}}zip=10001{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3. By zip code = 01032,ua (Kiev)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe407dc2-9b67-4978-8f5e-4c93f9bb7309",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=01032,ua{{api_id}}",
									"host": [
										"{{weather_url}}zip=01032,ua{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4. By zip code = 6663,za (Cape Town)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1563d000-506b-4142-8593-655d8e06edc5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('ZA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Cape Town\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=6665,za{{api_id}}",
									"host": [
										"{{weather_url}}zip=6665,za{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5. By zip code = 3900,gl (Nuuk)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e0505fd-91d8-4a48-ad80-dda36f98d340",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GL');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Nuuk\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=3900,gl{{api_id}}",
									"host": [
										"{{weather_url}}zip=3900,gl{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1. Cities within a rectangle zone (49,50,51,61,22)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b730b70-3d67-477a-8295-f31e942c9b1e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var triggerResponse = pm.response.json();",
											"    pm.expect(triggerResponse).to.contain.all.keys(\"calctime\",\"cnt\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var rsp = pm.response.json();",
											"    pm.expect(rsp.list).to.be.an('array');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}2.5/box/city?bbox=49,50,51,61,22{{api_id}}",
									"host": [
										"{{api_url}}2",
										"5"
									],
									"path": [
										"box",
										"city"
									],
									"query": [
										{
											"key": "bbox",
											"value": "49,50,51,61,22{{api_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2. Cities within a rectangle zone (49,50,51,61,0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b730b70-3d67-477a-8295-f31e942c9b1e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var triggerResponse = pm.response.json();",
											"    pm.expect(triggerResponse).to.contain.all.keys(\"calctime\",\"cnt\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var rsp = pm.response.json();",
											"    pm.expect(rsp.list).to.be.an('array');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}2.5/box/city?bbox=49,50,51,61,0{{api_id}}",
									"host": [
										"{{api_url}}2",
										"5"
									],
									"path": [
										"box",
										"city"
									],
									"query": [
										{
											"key": "bbox",
											"value": "49,50,51,61,0{{api_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3. Manual check default temperature in request Cities within a rectangle zone (49,50,51,61,22)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b730b70-3d67-477a-8295-f31e942c9b1e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var triggerResponse = pm.response.json();",
											"    pm.expect(triggerResponse).to.contain.all.keys(\"calctime\",\"cnt\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var rsp = pm.response.json();",
											"    pm.expect(rsp.list).to.be.an('array');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}2.5/box/city?bbox=49,50,51,61,22{{api_id}}",
									"host": [
										"{{api_url}}2",
										"5"
									],
									"path": [
										"box",
										"city"
									],
									"query": [
										{
											"key": "bbox",
											"value": "49,50,51,61,22{{api_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1. Check default number of cities in cycle (10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22dc3e06-df05-4f6a-99fc-c5e464f5296b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse).to.contain.all.keys(\"message\",\"count\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.list).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Default number cities equal 10\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.count).to.eql(10);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}/2.5/find?lat=50.38&lon=30.36&cnt=10&{{api_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"2.5",
										"find"
									],
									"query": [
										{
											"key": "lat",
											"value": "50.38"
										},
										{
											"key": "lon",
											"value": "30.36"
										},
										{
											"key": "cnt",
											"value": "10"
										},
										{
											"key": "{{api_id}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.2. Check number of cities in cycle  = 50",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04867049-84f0-488c-b302-f06ff9f9dbc5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse).to.contain.all.keys(\"message\",\"count\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.list).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Expected number of cities equal 50\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.count).to.eql(50);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}/2.5/find?lat=50.38&lon=30.36&cnt=50&{{api_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"2.5",
										"find"
									],
									"query": [
										{
											"key": "lat",
											"value": "50.38"
										},
										{
											"key": "lon",
											"value": "30.36"
										},
										{
											"key": "cnt",
											"value": "50"
										},
										{
											"key": "{{api_id}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3. Check number of cities in cycle  = 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7ddd0e9-aecf-4560-b7e1-640fd6521e1b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response from server contains all keys\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse).to.contain.all.keys(\"message\",\"count\",\"list\");",
											"});",
											"",
											"pm.test(\"Response from server is an array\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.list).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Expected number of cities equal 1\", function () {",
											"    var serverResponse = pm.response.json();",
											"    pm.expect(serverResponse.count).to.eql(1);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}/2.5/find?lat=50.38&lon=30.36&cnt=1&{{api_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"2.5",
										"find"
									],
									"query": [
										{
											"key": "lat",
											"value": "50.38"
										},
										{
											"key": "lon",
											"value": "30.36"
										},
										{
											"key": "cnt",
											"value": "1"
										},
										{
											"key": "{{api_id}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. 1. Call for several city IDs - 3 (Kiev,Mumbai,Nuuk)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4449c0e9-56f4-4ff7-b667-8d9c24fecf3b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected number of cities are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cnt).to.eql(3);",
											"});",
											"",
											"//check city ids in the response",
											"",
											"var cityIdList = postman.getEnvironmentVariable(\"3cityIdsList\").split(\",\");",
											"for(var i in cityIdList) {",
											"    isIdPresent = responseBody.has(cityIdList[i]);",
											"    tests[\"City id =  \" + cityIdList[i] + \" is present in response\"] = isIdPresent;",
											"}",
											"",
											"pm.test(\"Expected city name = Kiev is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Kiev\"));",
											"});",
											"",
											"pm.test(\"Expected city name = Kiev is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city name = Kiev is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Nuuk\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d78e7a8b-d7cf-4aaa-abd7-68a8d7bc6c92",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{data_url}}id={{3cityIdsList}}{{api_id}}",
									"host": [
										"{{data_url}}id={{3cityIdsList}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. 2. Call for several city IDs - 20 (Maximum cities ids)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "952c7b18-b317-49a5-9b42-3d4d6cce56a4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected count are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cnt).to.eql(20);",
											"});",
											"",
											"//check city ids in the response",
											"",
											"var cityIdList = postman.getEnvironmentVariable(\"20cityIdsList\").split(\",\");",
											"for(var i in cityIdList) {",
											"    isIdPresent = responseBody.has(cityIdList[i]);",
											"    tests[\"City id =  \" + cityIdList[i] + \" is present in response\"] = isIdPresent;",
											"}",
											"",
											"pm.test(\"Expected city name Kiev is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Kiev\"));",
											"});",
											"",
											"pm.test(\"Expected city name Cape Town is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Cape Town\"));",
											"});",
											"",
											"pm.test(\"Expected city name Mumbai is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city name Sydney is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Sydney\"));",
											"});",
											"",
											"pm.test(\"Expected city name Ottawa is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Ottawa\"));",
											"});",
											"",
											"pm.test(\"Expected city name Buenos Aires is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Buenos Aires\"));",
											"});",
											"",
											"pm.test(\"Expected city name Nuuk is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Nuuk\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{data_url}}id={{20cityIdsList}}&units=metric{{api_id}}",
									"host": [
										"{{data_url}}id={{20cityIdsList}}&units=metric{{api_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de1ff787-ccec-4ec1-a45f-7c5d62ad3a23",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "294842bf-e122-4e68-9b99-d1522facd676",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"tests[\"Response from server has time < 1500 ms\"] = responseTime < 1500;"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.2. Negative tests for check current city data.",
					"description": "This folder contains negative tests for functionality \"Current weather data\". Link to documentation - https://openweathermap.org/current",
					"item": [
						{
							"name": "1.1. By city name in lower case (kiev)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0772980e-179e-4dc9-bb36-db91d9b9cad7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
											"}); ",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=kiev{{api_id}}",
									"host": [
										"{{weather_url}}q=kiev{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2. By city with lower and upper letter in name (kIeV)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0f55066-7037-4f6f-bddc-e73e14b37983",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Expected city lon coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
											"});",
											"",
											"pm.test(\"Expected city lat coordinate is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
											"});",
											"",
											"pm.test(\"Expected city id is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(703448);",
											"});    ",
											"",
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql('Kiev');",
											"});  "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=kIeV{{api_id}}",
									"host": [
										"{{weather_url}}q=kIeV{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3. By empty city name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d460f16a-b205-4fe9-b10e-69def38080a6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Nothing to geocode\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{api_id}}",
									"host": [
										"{{weather_url}}q={{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4. By unvalid city name (Mojhjhon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d9a603-66b8-4181-b8b5-71010c2956d5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=Mojhjhon{{api_id}}",
									"host": [
										"{{weather_url}}q=Mojhjhon{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5. By long city name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e95c750-c5d4-4d5a-a543-842ec6dd78e3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 414\", function () {",
											"    pm.response.to.have.status(414);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"414 Request-URI Too Large\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q={{api_id}}",
									"host": [
										"{{weather_url}}q={{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. By city name, invalid combination of city name and country code (Kiev,us)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01001a57-a71f-45f4-b3a9-e1477fddc95a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=Kiev,us{{api_id}}",
									"host": [
										"{{weather_url}}q=Kiev,us{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2. By city name, invalid combination of country and code (London,bubu)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01001a57-a71f-45f4-b3a9-e1477fddc95a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=London,bubu{{api_id}}",
									"host": [
										"{{weather_url}}q=London,bubu{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1. By city unvalid id (a111)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2602eb26-7938-409f-986e-723184fe9f20",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"a1111275339 is not a city ID\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id=a111{{Mumbai_id}}{{api_id}}",
									"host": [
										"{{weather_url}}id=a111{{Mumbai_id}}{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2. By city empty id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2520c87-ac99-4470-a4c1-047482429a7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Nothing to geocode\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}id={{api_id}}",
									"host": [
										"{{weather_url}}id={{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1. By empty geographic coordinates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20daee70-e872-4afb-a4ff-6f4711c520ee",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Nothing to geocode\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lat=&lon={{api_id}}",
									"host": [
										"{{weather_url}}lat=&lon={{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2. By geographic coordinates with invalid lat values (lon=-181, lat=50)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "949f397e-e25f-420d-b339-1c2f4c0172f3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"-181 is not a float\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=-181&lat=50{{api_id}}",
									"host": [
										"{{weather_url}}lon=-181&lat=50{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3. By geographic coordinates with invalid lat values (lon=181, lat=50)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3f5239c-b392-4bc6-a136-c57ff6f346b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"181 is not a float\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=181&lat=50{{api_id}}",
									"host": [
										"{{weather_url}}lon=181&lat=50{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.4. By geographic coordinates with invalid lat values (lon=50, lat=-91)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9313ccb-973d-4a2c-ab44-3143696705a9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"-91 is not a float\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=50&lat=-91{{api_id}}",
									"host": [
										"{{weather_url}}lon=50&lat=-91{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.5. By geographic coordinates with invalid lat values (lon=50, lat=91)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10079b91-e8a4-42d1-9f17-21126f9deb21",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"91 is not a float\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}lon=50&lat=91{{api_id}}",
									"host": [
										"{{weather_url}}lon=50&lat=91{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1. By zip code + unvalid country (94040,ua) ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46af5cd4-6b02-4960-8ff2-1ce3f9326d9a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=94040,ua{{api_id}}",
									"host": [
										"{{weather_url}}zip=94040,ua{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2. By empty zip code + country (,ua)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83962afa-dda5-482d-8695-3b111b2d2495",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"invalid zip code\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=,ua{{api_id}}",
									"host": [
										"{{weather_url}}zip=,ua{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3. By invalid zip code + country (111,ua)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db3e0e80-47e2-4531-a1c1-922053571925",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}zip=111,ua{{api_id}}",
									"host": [
										"{{weather_url}}zip=111,ua{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1. Check invalid number of cities in cycle  = 51",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "804a8119-9c95-4581-b60b-a5ec923ff2d9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"cnt from 1 to 50\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}/2.5/find?lat=50.38&lon=30.36&cnt=51&{{api_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"2.5",
										"find"
									],
									"query": [
										{
											"key": "lat",
											"value": "50.38"
										},
										{
											"key": "lon",
											"value": "30.36"
										},
										{
											"key": "cnt",
											"value": "51"
										},
										{
											"key": "{{api_id}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.2. Check invalid number of cities in cycle  = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "804a8119-9c95-4581-b60b-a5ec923ff2d9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"cnt from 1 to 50\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{api_url}}/2.5/find?lat=50.38&lon=30.36&cnt=0&{{api_id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"2.5",
										"find"
									],
									"query": [
										{
											"key": "lat",
											"value": "50.38"
										},
										{
											"key": "lon",
											"value": "30.36"
										},
										{
											"key": "cnt",
											"value": "0"
										},
										{
											"key": "{{api_id}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Send invalid count of city ids (21)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aa3f142-59b9-4bdb-b0c0-3dba56830e9f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id list must be in range from 1 to 20\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{data_url}}id={{3cityIdsList}}.{{20cityIdsList}}&units=metric{{api_id}}",
									"host": [
										"{{data_url}}id={{3cityIdsList}}",
										"{{20cityIdsList}}&units=metric{{api_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d35e4b2-9549-4b79-8654-23c973eeb6c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb862df0-c8b3-43a5-a392-06c179d33cf7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1.3. Multilingual tests for check current city data",
					"description": "This folder contains multilingual tests for functionality \"Current weather data\". Link to documentation - https://openweathermap.org/current. Used languages in tests are chosen depending on alphabets type and number of speakers of that language.",
					"item": [
						{
							"name": "1. Check city name (Beijing) and description in chinese traditional language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e70f418-36d2-4005-a6b6-c7c7f027d46f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('CN');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Beijing\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=北京市{{api_id}}&lang=zh_cn",
									"host": [
										"{{weather_url}}q=北京市{{api_id}}&lang=zh_cn"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Check city name (Cairo) and description in arabic language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11892656-ad42-4ff7-9649-75a19c3334fd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('EG');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Cairo\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=القاهرة{{api_id}}&lang=ar",
									"host": [
										"{{weather_url}}q=القاهرة{{api_id}}&lang=ar"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Check city name  (Athens) and description in greek language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c26e828-f97f-48bc-b089-3b3b8926dad5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('GR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Athens\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=Αθήνα{{api_id}}&lang=el",
									"host": [
										"{{weather_url}}q=Αθήνα{{api_id}}&lang=el"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Check city name (Tehran) and description in persian language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61a11158-dfae-4a0a-a86f-570ba2779a3f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('IR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Tehran\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=تهران{{api_id}}&lang=fa",
									"host": [
										"{{weather_url}}q=تهران{{api_id}}&lang=fa"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Check city name (Kyoto) and description in japanese language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97a058d0-a1cc-4a16-b1e5-c943a41f0242",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('JP');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Kyoto\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=京都市{{api_id}}&lang=ja",
									"host": [
										"{{weather_url}}q=京都市{{api_id}}&lang=ja"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Check city name (Seoul) and description in korean language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ec83233-1c7b-459d-94c1-95269e0725a6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('KR');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Seoul\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=서울특별시{{api_id}}&lang=kr",
									"host": [
										"{{weather_url}}q=서울특별시{{api_id}}&lang=kr"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1. Check city name (Znamenka) and description in russian language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa2eeb0d-4b0a-4653-9d7f-b3c871dc3643",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('RU');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Znamenka\");",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"//check if all characters in description value equals russian characters",
											"var charactersOfRussianAlphabet = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя \";",
											"var countRuCharacter = 0;",
											"",
											"for(var i in data.weather[0].description) {",
											"    if (charactersOfRussianAlphabet.indexOf(data.weather[0].description[i]) != -1) {",
											"        countRuCharacter++;",
											"    }",
											"}",
											"",
											"tests[\"Weather description is in ukrainian\"] = countRuCharacter == (data.weather[0].description).length;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=Знаменка{{api_id}}&lang=ru",
									"host": [
										"{{weather_url}}q=Знаменка{{api_id}}&lang=ru"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.2. Check city name (Ivano-Frankivsk) and description in ukrainian language",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd0bcc91-9eae-4919-9512-8d6b69d66d8c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected country name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.sys.country).to.eql('UA');",
											"});",
											"",
											"pm.test(\"Expected city name is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.equal(\"Ivano-Frankivsk\");",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"//check if all characters in description value equals ukrainian characters",
											"var charactersOfUkrainianaAlphabet = \"АаБбВвГгҐґДдЕеЄєЖжЗзИиІіЇїЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЬьЮюЯя \";",
											"var countUaCharacter = 0;",
											"",
											"for(var i in data.weather[0].description) {",
											"    if (charactersOfUkrainianaAlphabet.indexOf(data.weather[0].description[i]) != -1) {",
											"        countUaCharacter++;",
											"    }",
											"}",
											"tests[\"Weather description is in ukrainian\"] = countUaCharacter == (data.weather[0].description).length;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=Івано-Франківськ{{api_id}}&lang=ua",
									"host": [
										"{{weather_url}}q=Івано-Франківськ{{api_id}}&lang=ua"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Call for several city IDs and add &lang=it",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac374acd-2e6a-4abe-9321-c9e3affb4ae8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Expected count are present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cnt).to.eql(20);",
											"});",
											"",
											"pm.test(\"Expected city name Kiev id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Kiev\"));",
											"});",
											"",
											"pm.test(\"Expected city name Kiev id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Cape Town\"));",
											"});",
											"",
											"pm.test(\"Expected city name Mumbai id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Mumbai\"));",
											"});",
											"",
											"pm.test(\"Expected city name Nuuk id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Sydney\"));",
											"});",
											"",
											"pm.test(\"Expected city name Nuuk id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Ottawa\"));",
											"});",
											"",
											"pm.test(\"Expected city name Nuuk id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Buenos Aires\"));",
											"});",
											"",
											"pm.test(\"Expected city name Nuuk id is present\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"Nuuk\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{data_url}}id={{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}},{{Nuuk_id}},{{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}},{{Nuuk_id}},{{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}}&units=metric&lang=it{{api_id}}",
									"host": [
										"{{data_url}}id={{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}},{{Nuuk_id}},{{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}},{{Nuuk_id}},{{Kiev_id}},{{Cape Town_id}},{{Mumbai_id}},{{Sydney_id}},{{Ottawa_id}},{{Buenos Aires_id}}&units=metric&lang=it{{api_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Send city name (Kathmandu) in unsupported language (Nepali)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb74501-ddc9-46b1-8300-b53e233fb39d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response from server has a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"city not found\");",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{weather_url}}q=नेपाल{{api_id}}&lang=ne",
									"host": [
										"{{weather_url}}q=नेपाल{{api_id}}&lang=ne"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5259b1ba-b435-404f-9fb9-aa12abc7c195",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27595c47-f5c9-4c82-9eb2-3dc4ac96737b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a514d043-67ad-4cb6-b177-83b622ec9eb4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0ad0ee12-1287-481a-bfc1-3c20d5fd4ed7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "2. 5 day / 3 hour forecast",
			"description": "This folder contains all tests for functionality \"5 day / 3 hour forecast\". Link to documentation - https://openweathermap.org/forecast5",
			"item": [
				{
					"name": "1. Check current weather data in request by city name (Kiev)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d9e5c02-bc7c-4c8f-955e-37fab2bba38f",
								"type": "text/javascript",
								"exec": [
									"responseFromServer = [",
									"    \"cnt\",",
									"    \"list\",",
									"    \"dt\",",
									"    \"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"    \"description\",",
									"    \"clouds\",",
									"    \"wind\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Response forecast has records for 5days / 3h\"] = response.list.filter(v=>\"dt\" in v).length == 40;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{forecast_url}}q={{Kiev}}{{metric}}{{api_id}}",
							"host": [
								"{{forecast_url}}q={{Kiev}}{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Check current weather data in request by city name, country code (Kiev,ua)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5af7786f-66fc-4569-8517-359de4805d5e",
								"type": "text/javascript",
								"exec": [
									"responseFromServer = [",
									"    \"cnt\",",
									"    \"list\",",
									"    \"dt\",",
									"    \"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"    \"description\",",
									"    \"clouds\",",
									"    \"wind\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Response forecast has records for 5days / 3h\"] = response.list.filter(v=>\"dt\" in v).length == 40;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{forecast_url}}q={{Kiev}},ua{{metric}}{{api_id}}",
							"host": [
								"{{forecast_url}}q={{Kiev}},ua{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Check current weather data in request by city id (Kiev id = 703448)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a78a680-b8f8-4a78-9a11-ad67df9bd121",
								"type": "text/javascript",
								"exec": [
									"responseFromServer = [",
									"    \"cnt\",",
									"    \"list\",",
									"    \"dt\",",
									"    \"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"    \"description\",",
									"    \"clouds\",",
									"    \"wind\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Response forecast has records for 5days / 3h\"] = response.list.filter(v=>\"dt\" in v).length == 40;"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{forecast_url}}id={{Kiev_id}}{{metric}}{{api_id}}",
							"host": [
								"{{forecast_url}}id={{Kiev_id}}{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Check current weather data in request by Kiev geographic coordinates (lat=50.43&lon=30.52)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cc63fb9-5706-46ff-9eae-5446c03a7e1d",
								"type": "text/javascript",
								"exec": [
									"responseFromServer = [",
									"    \"cnt\",",
									"    \"list\",",
									"    \"dt\",",
									"    \"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"    \"description\",",
									"    \"clouds\",",
									"    \"wind\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Response forecast has records for 5days / 3h\"] = response.list.filter(v=>\"dt\" in v).length == 40;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{forecast_url}}lat=50.43&lon=30.52{{metric}}{{api_id}}",
							"host": [
								"{{forecast_url}}lat=50",
								"43&lon=30",
								"52{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Check current weather data in request by Kiev zip code, country (01032,ua)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87e5dfc2-9636-4042-93c2-70a8c04421a2",
								"type": "text/javascript",
								"exec": [
									"responseFromServer = [",
									"    \"cnt\",",
									"    \"list\",",
									"    \"dt\",",
									"    \"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"    \"description\",",
									"    \"clouds\",",
									"    \"wind\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"tests[\"Response forecast has records for 5days / 3h\"] = response.list.filter(v=>\"dt\" in v).length == 40;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{forecast_url}}zip=01032,ua{{metric}}{{api_id}}",
							"host": [
								"{{forecast_url}}zip=01032,ua{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "31b3e429-2137-4bbe-8b66-4b870dbee187",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91712738-634b-4f67-8ff3-e591b695c205",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status is ok, response is json\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response from server has a body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"tests[\"Response from server has time < 1500 ms\"] = responseTime < 1500;"
						]
					}
				}
			]
		},
		{
			"name": "3. Weather map layers",
			"description": "This folder contains positive tests for functionality \"Weather map layerst\". Link to documentation - https://openweathermap.org/api/weathermaps",
			"item": [
				{
					"name": "1.  Clouds map layer request in maps.owm.io (name = clouds_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04cb45a1-9282-45bb-a64a-00680d731357",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"401 Authorization Required\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "maps.owm.io/map/clouds_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"maps",
								"owm",
								"io"
							],
							"path": [
								"map",
								"clouds_new",
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Clouds map layer request (name = clouds_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c18eacef-00b4-441e-8d90-cafe22371348",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is image/png\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"image/png\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}clouds_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}clouds_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Precipitation map layers request (name = precipitation_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f6e3025-5e94-4904-a6a7-93312a8b9c3d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is image/png\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"image/png\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}precipitation_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}precipitation_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Sea level pressure map layers request (name = pressure_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "781afca9-d764-4bbc-8dec-8a9f4103ddff",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is image/png\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"image/png\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}pressure_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}pressure_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Wind speed map layers request (name = wind_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "273c49cb-74b1-47f5-b183-fc1031696ea2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is image/png\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"image/png\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}wind_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}wind_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Temperature map layers request (name = temp_new)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6f20338-c781-406c-bbac-efca5850f74d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is image/png\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"image/png\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}temp_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}temp_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Request by invalid layer's name = layer_new",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df895ac0-43d3-4b7b-bdd3-1dfcd121bcb9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found style /data/node/styles/layer_new.xml\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}layer_new/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}layer_new"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Request by empty (default) layer's name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62bbc9b4-5045-4477-9912-b97a73705aef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found style /data/node/styles/default.xml\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{map_url}}/4/4/3.png{{api_id_for_station}}",
							"host": [
								"{{map_url}}"
							],
							"path": [
								"4",
								"4",
								"3.png{{api_id_for_station}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "497094d8-1fc7-425b-a073-6c26cd651404",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ab9e0214-7bf0-4c22-b398-304709ea4ad4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "4. UV Index",
			"description": "This folder contains all tests for functionality \"UV Index\". Link to documentation - https://openweathermap.org/api/uvi",
			"item": [
				{
					"name": "1.1. Check current UV data by geographic coordinates (lat=50.43, lon=30.53)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d778975-0ba7-4cac-9cb9-d249eed6b390",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected value of longitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lon).to.eql(30.53);",
									"});",
									"",
									"pm.test(\"Expected value of latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lat).to.eql(50.43);",
									"});",
									"",
									"pm.test(\"Expected keys 'date_iso', 'date' and 'value' are presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.all.keys(\"date_iso\",\"date\",\"value\");",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value UV '\" + jsonResponse.value + \"' is in correct data range\"] = (jsonResponse.value >= 0 && jsonResponse.value <= 11);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat={{kiev_lat}}&lon={{kiev_lon}}{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{kiev_lat}}"
								},
								{
									"key": "lon",
									"value": "{{kiev_lon}}{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2. Check current UV data by geographic coordinates (lat=-33.93, lon=18.42)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b86aec8a-00b3-4aa9-8612-d0feb8951f53",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected value of latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lat).to.eql(-33.93);",
									"});",
									"",
									"pm.test(\"Expected value of latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.lon).to.eql(18.42);",
									"});",
									"",
									"pm.test(\"Expected keys 'date_iso', 'date' and 'value' are presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.all.keys(\"date_iso\",\"date\",\"value\");",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value UV '\" + jsonResponse.value + \"' is in correct data range\"] = (jsonResponse.value >= 0 && jsonResponse.value <= 11);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=-33.93&lon=18.42{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "-33.93"
								},
								{
									"key": "lon",
									"value": "18.42{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3. Check current UV data by geographic coordinates (lat=0, lon=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "227d52e8-c4c5-41ae-93ca-b61924610554",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lat field is not valid: actual - 0, expected - required\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=0&lon=0{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "0"
								},
								{
									"key": "lon",
									"value": "0{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4. Check current UV data by invalid geographic coordinates (lat=-91, lon=50)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74b19edd-a07a-4961-bbae-071d007a25f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lat field is not valid: actual - -91, expected - min -90\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=-91&lon=50{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "-91"
								},
								{
									"key": "lon",
									"value": "50{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5. Check current UV data by invalid geographic coordinates (lat=91, lon=50)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "159351f8-e85e-4759-9622-f717d650e2ff",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lat field is not valid: actual - 91, expected - max 90\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=91&lon=50{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "91"
								},
								{
									"key": "lon",
									"value": "50{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.6. Check current UV data by invalid geographic coordinates (lat=50, lon=-181)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0c906e0-3344-4cc5-8d64-fa3da3c690f6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lon field is not valid: actual - -181, expected - min -180\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=50&lon=-181{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "50"
								},
								{
									"key": "lon",
									"value": "-181{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.7. Check current UV data by invalid geographic coordinates (lat=50, lon=181)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e22116a9-ca84-4fb6-a8b9-c48d83421d3a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lon field is not valid: actual - 181, expected - max 180\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi?lat=50&lon=181{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi"
							],
							"query": [
								{
									"key": "lat",
									"value": "50"
								},
								{
									"key": "lon",
									"value": "181{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Check forecast UV data by valid geographic coordinates ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae82c3ee-8d12-44be-950f-9a669dbfcf6d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 8\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(8);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat={{kiev_lat}}&lon={{kiev_lon}}{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{kiev_lat}}"
								},
								{
									"key": "lon",
									"value": "{{kiev_lon}}{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2. Check forecast UV data by invalid geographic coordinates (lat=91, lon=50)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e94cad5-93bd-4ec0-a943-dc55449d7e3e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lat field is not valid: actual - -91, expected - min -90\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-91&lon=50{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-91"
								},
								{
									"key": "lon",
									"value": "50{{api_id}}"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.1. Call forecast UV data with number of returned days (cnt=8)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17f9c2d2-9b21-4d5c-88cc-5e9e21f93b34",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 8\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(8);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-73.99&lon=40.73&cnt=8{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-73.99"
								},
								{
									"key": "lon",
									"value": "40.73"
								},
								{
									"key": "cnt",
									"value": "8{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2. Check forecast UV data with number of returned days (cnt=1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80e33352-8dc3-4690-89b4-d89d80bef2ca",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 1\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(1);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-73.99&lon=40.73&cnt=1{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-73.99"
								},
								{
									"key": "lon",
									"value": "40.73"
								},
								{
									"key": "cnt",
									"value": "1{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3. Check forecast UV data with invalid number of returned days (cnt=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4fa38b7-e8c6-4ac8-a493-1617816d6c19",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 0\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-73.99&lon=40.73&cnt=0{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-73.99"
								},
								{
									"key": "lon",
									"value": "40.73"
								},
								{
									"key": "cnt",
									"value": "0{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4. Check forecast UV data with invalid number of returned days (cnt=-1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a966459b-2902-4e03-a363-75b1999383ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Cnt field is not valid: actual - -1, expected - min 0\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-73.99&lon=40.73&cnt=-1{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-73.99"
								},
								{
									"key": "lon",
									"value": "40.73"
								},
								{
									"key": "cnt",
									"value": "-1{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5. Check forecast UV data with invalid number of returned days (cnt=9)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71d2c9d8-2bf3-4e32-a806-1f3e039144fb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Cnt field is not valid: actual - 9, expected - max 8\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{api_url}}/2.5/uvi/forecast?lat=-73.99&lon=40.73&cnt=9{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"2.5",
								"uvi",
								"forecast"
							],
							"query": [
								{
									"key": "lat",
									"value": "-73.99"
								},
								{
									"key": "lon",
									"value": "40.73"
								},
								{
									"key": "cnt",
									"value": "9{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4.1. Check historical UV data by geographic coordinates with date (start date=1 January 2018, end date=8 January 2018)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17f9c2d2-9b21-4d5c-88cc-5e9e21f93b34",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 8\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(8);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=1514764800&end=1515369600{{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=1514764800&end=1515369600{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2. Check historical UV data by geographic coordinates with date (start date=1 April 2018, end date=9 April 2018)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a760d3e-a55f-4b4e-b304-74b4633ec591",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 9\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(9);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=1522540800&end=1523232000{{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=1522540800&end=1523232000{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3. Check historical UV data by geographic coordinates with date (start date=22 June 2017, end date=3 June 2018) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d677a939-b62c-41c5-a228-bd33e567ff41",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 329\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(329);",
									"});",
									"",
									"pm.test(\"Response from server has all keys\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0]).to.contain.all.keys(\"lat\", \"lon\", \"date_iso\", \"date\", \"value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=1498089600&end=1527984000{{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=1498089600&end=1527984000{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.4. Check historical UV data by geographic coordinates with invalid date (start date=19 June 2017, end date=21 June 2017) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94facced-69e3-4764-805f-5258eacc6cf1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server is an array\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response from server has default array length = 0\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.length).equal(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=1484956800&end=1485043200{{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=1484956800&end=1485043200{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.5. Check historical UV data by geographic coordinates with invalid date (start date=31 January 2018, end date=1 January 2018)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "914b5781-6b33-4bff-8bae-efa003098e61",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"End field is not valid: actual - 1514764800, expected - gtefield Start\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=1517356800&end=1514764800{{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=1517356800&end=1514764800{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.6. Check historical UV data by geographic coordinates with empty date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f479cbb1-93a7-4de6-888c-b52f06dc20c5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Start field is not valid: actual - 0, expected - required\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{uvi_history_url}}lat=-73.99&lon=40.73&start=&end={{api_id}}",
							"host": [
								"{{uvi_history_url}}lat=-73",
								"99&lon=40",
								"73&start=&end={{api_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f398af39-9031-4df7-8ff6-0bea47fbab2a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4fe48e94-bfd6-4eac-8b32-0ab279c3d2ff",
						"type": "text/javascript",
						"exec": [
							"tests[\"Response from server has time < 1200 ms\"] = responseTime < 1200;"
						]
					}
				}
			]
		},
		{
			"name": "5. Weather stations",
			"description": "This folder contains all tests for functionality \"Weather stations\". Link to documentation - https://openweathermap.org/stations",
			"item": [
				{
					"name": "1. Create new weather station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6b3efbe-efa8-4b0c-98ce-f62468324b1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected station external id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.external_id).to.eql('3b9384f3-6298-44ac-9d2e-b97b0617cb8c');",
									"});",
									"",
									"pm.test(\"Expected station name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.name).to.eql('Maidan nezalegnosti station');",
									"});",
									"",
									"pm.test(\"Expected station latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.latitude).to.eql(parseFloat('30.52'));",
									"});",
									"",
									"pm.test(\"Expected station longitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.longitude).to.eql(parseFloat('50.45'));",
									"});",
									"",
									"pm.test(\"Expected station altitude is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.altitude).to.eql(parseInt('150'));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"station_id\", jsonData.ID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"3b9384f3-6298-44ac-9d2e-b97b0617cb8c\",\r\n    \"name\": \"Maidan nezalegnosti station\",\r\n    \"latitude\": 30.52,\r\n    \"longitude\": 50.45,\r\n    \"altitude\": 150\r\n}"
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Transfer measurements to station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dd7c35d-6630-41c3-b0fd-52ebce13c6ed",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"station_id\": \"{{station_id}}\",\r\n    \"dt\": 1496294002,\r\n    \"temperature\": 18.7,\r\n    \"wind_speed\": 1.2,\r\n    \"wind_gust\": 3.4,\r\n    \"pressure\": 1021,\r\n    \"humidity\": 87,\r\n    \"rain_1h\": 2,\r\n    \"clouds\": [\r\n        {\r\n            \"condition\": \"NSC\"\r\n        }\r\n    ]\r\n  }\r\n]"
						},
						"url": {
							"raw": "api.openweathermap.org/data/3.0/measurements?station_id={{station_id}}{{api_id}}",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"3.0",
								"measurements"
							],
							"query": [
								{
									"key": "station_id",
									"value": "{{station_id}}{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Transfer measurements to station with unvalid  id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "642c4c78-1fa0-498c-9e37-a14b709566f9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station id is invalid\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"station_id\": \"{{station_id}}+1\",\r\n    \"dt\": 1479817340,\r\n    \"temperature\": 18.7,\r\n    \"wind_speed\": 1.2,\r\n    \"wind_gust\": 3.4,\r\n    \"pressure\": 1021,\r\n    \"humidity\": 87,\r\n    \"rain_1h\": 2,\r\n    \"clouds\": [\r\n        {\r\n            \"condition\": \"NSC\"\r\n        }\r\n    ]\r\n  }\r\n]"
						},
						"url": {
							"raw": "api.openweathermap.org/data/3.0/measurements?station_id={{station_id}}{{api_id}}",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"3.0",
								"measurements"
							],
							"query": [
								{
									"key": "station_id",
									"value": "{{station_id}}{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get aggregate measurements from created station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab2864f5-27ef-410e-bac1-0c00140679b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected station external id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.external_id).to.eql('3b9384f3-6298-44ac-9d2e-b97b0617cb8c');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "api.openweathermap.org/data/3.0/measurements?station_id={{station_id}}&type=m&limit=10&from=13065202&to=1590988402{{api_id}}",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"3.0",
								"measurements"
							],
							"query": [
								{
									"key": "station_id",
									"value": "{{station_id}}"
								},
								{
									"key": "type",
									"value": "m"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "from",
									"value": "13065202"
								},
								{
									"key": "to",
									"value": "1590988402{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get list of all stations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60049c38-dda0-4fd9-aa73-35482a0e3b9a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get station by id and check data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38628692-359e-4214-b491-8dd268346701",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected station external id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.external_id).to.eql('3b9384f3-6298-44ac-9d2e-b97b0617cb8c');",
									"});",
									"",
									"pm.test(\"Expected station name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.name).to.eql('Maidan nezalegnosti station');",
									"});",
									"",
									"pm.test(\"Expected station latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.latitude).to.eql(parseFloat('30.52'));",
									"});",
									"",
									"pm.test(\"Expected station longitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.longitude).to.eql(parseFloat('50.45'));",
									"});",
									"",
									"pm.test(\"Expected station altitude is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.altitude).to.eql(parseInt('150'));",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Update station data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e919a72-2222-40e1-94e2-02146471ac65",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected station external id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.external_id).to.eql('updated eternal id');",
									"});",
									"",
									"pm.test(\"Expected station name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.name).to.eql('New maidan nezalegnosti station');",
									"});",
									"",
									"pm.test(\"Expected station latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.latitude).to.eql(parseFloat('11.11'));",
									"});",
									"",
									"pm.test(\"Expected station longitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.longitude).to.eql(parseFloat('123.33'));",
									"});",
									"",
									"pm.test(\"Expected station altitude is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.altitude).to.eql(parseInt('88'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"updated eternal id\",\r\n    \"name\": \"New maidan nezalegnosti station\",\r\n    \"latitude\": 11.11,\r\n    \"longitude\": 123.33,\r\n    \"altitude\": 88\r\n}"
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Check station data after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f05c8f29-b833-4781-90f9-07f6462618c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected station external id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.external_id).to.eql('updated eternal id');",
									"});",
									"",
									"pm.test(\"Expected station name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.name).to.eql('New maidan nezalegnosti station');",
									"});",
									"",
									"pm.test(\"Expected station latitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.latitude).to.eql(parseFloat('11.11'));",
									"});",
									"",
									"pm.test(\"Expected station longitude coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.longitude).to.eql(parseFloat('123.33'));",
									"});",
									"",
									"pm.test(\"Expected station altitude is present\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData.altitude).to.eql(parseInt('88'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Delete created station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9d5284f-8670-4efa-b85c-9c23a4f351ed",
								"type": "text/javascript",
								"exec": [
									"pm.globals.unset(\"station_id\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Request to delete station again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b8b46da-2332-49f6-8019-477b7ddd93d3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Station id not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station id not valid\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Check that the station has deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afe92b18-b8c8-4d8b-8e50-f5a410b7544d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Station id not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station id not valid\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{station_url_slash}}{{station_id}}{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}{{station_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Create new weather station with invalid latitude (99.52)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13d42055-130a-40e4-b921-537fb75773c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station latitude should be in (-90:90)\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"3b9384f3-6298-44ac-9d2e-b97b0617cb8c\",\r\n    \"name\": \"Maidan nezalegnosti station\",\r\n    \"latitude\": 99.52,\r\n    \"longitude\": 50.45,\r\n    \"altitude\": 150\r\n}"
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Create new weather station with invalid longitude (190.45)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c3b1154-f253-47c0-a6be-93e73d97fe3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station longitude should be in (-180:180)\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"3b9384f3-6298-44ac-9d2e-b97b0617cb8c\",\r\n    \"name\": \"Maidan nezalegnosti station\",\r\n    \"latitude\": 22.52,\r\n    \"longitude\": 190.45,\r\n    \"altitude\": 150\r\n}"
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Create new weather station with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d600337b-5863-482a-91c8-517b6ce183bb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad or zero length station name\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"3b9384f3-6298-44ac-9d2e-b97b0617cb8c\",\r\n    \"name\": \"\",\r\n    \"latitude\": 22.52,\r\n    \"longitude\": 4.45,\r\n    \"altitude\": 150\r\n}"
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Create new weather station with empty external_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b54e8147-f63b-4450-8336-1c6a5487d52f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad external id\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"\",\r\n    \"name\": \"Maidan nezalegnosti station\",\r\n    \"latitude\": 22.52,\r\n    \"longitude\": 90.45,\r\n    \"altitude\": 22\r\n}"
						},
						"url": {
							"raw": "{{station_url}}{{api_id}}",
							"host": [
								"{{station_url}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Update station with nonexistent id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea24fd38-708e-4073-8051-db034c423f53",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Station id not valid\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"external_id\": \"updated eternal id\",\r\n    \"name\": \"New maidan nezalegnosti station\",\r\n    \"latitude\": 11.11,\r\n    \"longitude\": 123.33,\r\n    \"altitude\": 88\r\n}"
						},
						"url": {
							"raw": "{{station_url_slash}}123{{api_id_for_station}}",
							"host": [
								"{{station_url_slash}}123{{api_id_for_station}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "793626a3-73a4-4650-a3ba-367bc74ceb0c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "476acd1d-1899-4d93-87c2-2f1477ae51cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6. Weather alerts",
			"description": "This folder contains all tests for functionality \"Weather alerts\". Link to documentation - https://openweathermap.org/triggers",
			"item": [
				{
					"name": "1.1. Create new trigger with valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad6c758-f1f9-481b-b874-e90ea41f1d3a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server contains all keys\", function () {",
									"    var triggerResponse = pm.response.json();",
									"    pm.expect(triggerResponse).to.contain.all.keys(\"_id\",\"alerts\",\"area\",\"conditions\",\"time_period\");",
									"});",
									"",
									"pm.test(\"Response from server contains all data from body request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.area[0].coordinates[0]).to.eql(+pm.globals.get(\"kiev_lat\"));",
									"    pm.expect(jsonData.area[0].coordinates[1]).to.eql(+pm.globals.get(\"kiev_lon\"));",
									"    pm.expect(jsonData.time_period.start.amount).to.eql(+pm.globals.get(\"trigger_start_date\"));    ",
									"    pm.expect(jsonData.time_period.end.amount).to.eql(+pm.globals.get(\"trigger_end_date\"));",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"trigger_id\", jsonData._id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{trigger_start_date}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{trigger_end_date}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":299\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            50.43,\r\n            30.53\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2. Create new trigger with invalid coordinates (91.43, 181.53)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a393456b-3d64-44f3-850e-b68d63e0f2e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Points lat should be a number (from -90 to 90) and lon should be a number (from -180 to 180).\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{trigger_start_date}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{trigger_end_date}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":299\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            91.43,\r\n            181.53\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3. Create new trigger without coordinates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a65a8fe-de88-4894-9e03-1ea07fdb7549",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Params: \\\"type\\\" and \\\"coordinates\\\" are required for every geometry.\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":253402300799\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":253402300799\r\n      }\r\n   },\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\"\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Get alerts by trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7aea9276-fe38-42a8-bb3d-5084656f8533",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server contains all keys\", function () {",
									"    var triggerResponse = pm.response.json();",
									"    pm.expect(triggerResponse).to.contain.all.keys(\"_id\",\"alerts\",\"area\",\"conditions\",\"time_period\");",
									"});",
									"",
									"pm.test(\"Response from server contains all data from body request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.area[0].coordinates[0]).to.eql(+pm.globals.get(\"kiev_lat\"));",
									"    pm.expect(jsonData.area[0].coordinates[1]).to.eql(+pm.globals.get(\"kiev_lon\"));",
									"    pm.expect(jsonData.time_period.start.amount).to.eql(+pm.globals.get(\"trigger_start_date\"));    ",
									"    pm.expect(jsonData.time_period.end.amount).to.eql(+pm.globals.get(\"trigger_end_date\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{startdate01.05.2018}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{enddate}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":-315\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            {{geolat}},\r\n            {{geolon}}\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{trigger_id}}{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{trigger_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2. Get alerts by trigger unvalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9479b06f-b1b5-4281-9f34-6ebfd2b3d90e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid trigger ID\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{startdate01.05.2018}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{enddate}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":-315\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            {{geolat}},\r\n            {{geolon}}\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/5b1324dfb4c{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"5b1324dfb4c{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get list of all triggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce4954e9-77b8-4dc1-8807-8bb7913de9aa",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response has from server has all correct data\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response[0].area[0].coordinates[0]).to.eql(+pm.variables.get(\"kiev_lat\"));",
									"    pm.expect(response[0].area[0].coordinates[1]).to.eql(+pm.variables.get(\"kiev_lon\"));",
									"    pm.expect(response[0].time_period.start.amount).to.eql(+pm.variables.get(\"trigger_start_date\"));",
									"    pm.expect(response[0].time_period.end.amount).to.eql(+pm.variables.get(\"trigger_end_date\"));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{startdate01.05.2018}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{enddate}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":-315\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            {{geolat}},\r\n            {{geolon}}\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Update trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3417420d-9e5d-435f-8070-54d6d45f8b76",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response from server contains all keys\", function () {",
									"    var triggerResponse = pm.response.json();",
									"    pm.expect(triggerResponse).to.contain.all.keys(\"_id\",\"alerts\",\"area\",\"conditions\",\"time_period\");",
									"});",
									"",
									"pm.test(\"Response from server contains all data from body request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.area[0].coordinates[0]).to.eql(99.41);",
									"    pm.expect(jsonData.area[0].coordinates[1]).to.eql(40.23);",
									"    pm.expect(jsonData.time_period.start.amount).to.eql(1370215294);    ",
									"    pm.expect(jsonData.time_period.end.amount).to.eql(1401751294);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":1370215294\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":1401751294\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":299\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            99.41,\r\n            40.23\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{trigger_id}}{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{trigger_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.1. Delete created trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d30a379-9a87-40cf-a0fd-1fa19690045b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"trigger_id\");"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{trigger_id}}{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{trigger_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2. Request to delete trigger again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c478e4-1742-48b0-8ecb-8e27e9e62638",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful request\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid trigger ID\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{trigger_id}}{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{trigger_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Check that trigger has deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e768324-dce6-4081-88b5-f2f65ad2d907",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid trigger ID\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"time_period\":{\r\n      \"start\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{startdate01.05.2018}}\r\n      },\r\n      \"end\":{\r\n         \"expression\":\"after\",\r\n         \"amount\":{{enddate}}\r\n      }\r\n   },\r\n   \"conditions\":[\r\n      {\r\n         \"name\":\"temp\",\r\n         \"expression\":\"$gt\",\r\n         \"amount\":-315\r\n      }\r\n   ],\r\n   \"area\":[\r\n      {\r\n         \"type\":\"Point\",\r\n         \"coordinates\":[\r\n            {{geolat}},\r\n            {{geolon}}\r\n         ]\r\n      }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{api_url}}/3.0/triggers/{{trigger_id}}{{api_id_for_station}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"triggers",
								"{{trigger_id}}{{api_id_for_station}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bad08716-383c-4863-a0b6-75e3e380298a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "07525209-d9e7-4ace-bb98-3f916563d735",
						"type": "text/javascript",
						"exec": [
							"tests[\"Response from server has time < 1200 ms\"] = responseTime < 1200;"
						]
					}
				}
			]
		},
		{
			"name": "7. Air pollution",
			"description": "This folder contains all tests for functionality \"Air pollution\". Link to documentation - https://openweathermap.org/api/pollution/co",
			"item": [
				{
					"name": "1. Check Carbon Monoxide index by location,date (30,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8519a3a2-5a82-40af-9345-ea999c8f1021",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/30,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"30,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Check Carbon Monoxide index by location,current date (40,-74)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c32babb-8365-4cde-ba85-4e975a3cdcef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"tests[\"Response from server has time < 1200 ms\"] = responseTime < 1200;",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/40,-74/current.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"40,-74",
								"current.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Check Carbon Monoxide index by invalid date (2025-11Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "534e7802-efbb-4802-8921-53fb73efc915",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/40,-74/2025-11Z.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"40,-74",
								"2025-11Z.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Check Carbon Monoxide index by wrong format of time (40,-74,2016z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28db11a2-5ec2-4378-88ce-ea0c329f2b2a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"wrong format of time, please, use ISO8601\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/40,-74/2016z.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"40,-74",
								"2016z.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Check Carbon Monoxide index by min date (2015-11Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c32babb-8365-4cde-ba85-4e975a3cdcef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"tests[\"Response from server has time < 1200 ms\"] = responseTime < 1200;",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/40,-74/2016-07Z.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"40,-74",
								"2016-07Z.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Check Carbon Monoxide index by invalid lat,date (-91,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3aef4a44-62e4-4705-9c28-f69b09840a45",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid point in geo near query\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/-91,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"-91,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Check Carbon Monoxide index by invalid lat,date (91,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0384a51a-0f4b-49fc-a96d-08353350a417",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid point in geo near query\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/91,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"91,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Check Carbon Monoxide index by invalid lon,date (-181,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc261813-b252-4a54-bbc6-361652fd1ea0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid point in geo near query\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/50,-181/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"50,-181",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Check Carbon Monoxide index by invalid lon,date (-181,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28e52e2c-0831-47e2-9869-dbca19e52790",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid point in geo near query $geometry argument:\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/50,181/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"50,181",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Check Carbon Monoxide index via request with invalid syntax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "145e2bd0-3bd7-4c1a-9725-c8900808b696",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid syntax\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/=50,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"=50,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Check Carbon Monoxide index via request without coordinates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "695edfd8-c926-424e-8426-db106b862396",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/co/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"co",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Check Ozone data by location,date (30,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6caa411d-eec0-41b8-9d1c-4486db15f36a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current data value '\" + jsonResponse.data + \"' is not in range\"] = (jsonResponse.data >= 100 && jsonResponse.data <= 600); ",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/o3/30,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"o3",
								"30,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Check Ozone data by location,current date (40,-74)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a687d3a-a23a-497b-855a-d5b108a881e1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current data value '\" + jsonResponse.data + \"' is not in range\"] = (jsonResponse.data >= 90 && jsonResponse.data <= 120); ",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/o3/40,-74/current.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"o3",
								"40,-74",
								"current.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Check Sulfur Dioxide index by location,date (30,50,2018-05Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "728d3dcb-3f35-456e-9e5b-395d2dcc0069",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/so2/30,50/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"so2",
								"30,50",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Check Sulfur Dioxide index by location,current date (40,-74)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "728d3dcb-3f35-456e-9e5b-395d2dcc0069",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/so2/40,-74/{{date}}.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"so2",
								"40,-74",
								"{{date}}.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Check Nitrogen Dioxide index by location,date (30,50,2016Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6b8c591-2034-4266-b103-cb019acd42a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/no2/30,50/2016Z.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"no2",
								"30,50",
								"2016Z.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Check Nitrogen Dioxide index by location, date (40,-74,2016Z)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67e920fa-6fd2-4ab5-af7c-487bf1f23583",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});",
									"",
									"    var response = pm.response.json();",
									"tests[\"no2 value is null\"] = response.data.no2 !== null;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/no2/40,-74/2016Z.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"no2",
								"40,-74",
								"2016Z.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. Check Nitrogen Dioxide index by location, current date (40,-74)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0904b1c1-56e2-4ae9-895a-5c264c5a69fb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status is ok, response is json\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response from server has a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Expected key 'time' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"time\");",
									"});",
									"",
									"pm.test(\"Expected key 'location' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"location\");",
									"});",
									"",
									"pm.test(\"Expected key 'data' is presen in response\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.contain.key(\"data\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"coord\": {\n        \"lon\": 30.52,\n        \"lat\": 50.45\n    },\n    \"weather\": [\n        {\n            \"id\": 805,\n            \"main\": \"Clear\",\n            \"description\": \"clear sky\",\n            \"icon\": \"01d\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 299.15,\n        \"pressure\": 1025,\n        \"humidity\": 29,\n        \"temp_min\": 299.15,\n        \"temp_max\": 299.15\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": 5,\n        \"deg\": 50\n    },\n    \"clouds\": {\n        \"all\": 0\n    },\n    \"dt\": 1527600600,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 7358,\n        \"message\": 0.0065,\n        \"country\": \"UA\",\n        \"sunrise\": 1527558827,\n        \"sunset\": 1527616660\n    },\n    \"id\": 703448,\n    \"name\": \"Kyiv\",\n    \"cod\": 200"
						},
						"url": {
							"raw": "{{pollution_url}}/no2/40,-74/current.json{{api_id_for_station}}",
							"host": [
								"{{pollution_url}}"
							],
							"path": [
								"no2",
								"40,-74",
								"current.json{{api_id_for_station}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b7f61f9-58c4-4aa9-a86f-a16b7c3dcc7e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b50c46d8-f8d9-4882-aba6-9baf5a5e309d",
						"type": "text/javascript",
						"exec": [
							"tests[\"Response from server has time < 1500 ms\"] = responseTime < 1500;"
						]
					}
				}
			]
		},
		{
			"name": "8. Other and optional parameters tests",
			"description": "This folder contains security tests for api key and test with optional parameters.",
			"item": [
				{
					"name": "1. Request without API KEY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5acbfced-8786-4734-9e10-ff46bf1483a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}{{Kiev}}",
							"host": [
								"{{weather_url}}{{Kiev}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Request with invalid API KEY",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5acbfced-8786-4734-9e10-ff46bf1483a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}{{Kiev}}&APPID=b6907d289e10d714a6e88b30761fae22",
							"host": [
								"{{weather_url}}{{Kiev}}&APPID=b6907d289e10d714a6e88b30761fae22"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Request without API version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71a5a104-999c-41db-ac7e-654231ce4cd5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 502\", function () {",
									"    pm.response.to.have.status(502);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"502 Bad Gateway\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_url}}/weather?q={{Kiev}}{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "q",
									"value": "{{Kiev}}{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Request with unvalid API version (3.0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66052a4a-18e5-4ded-9e85-0716d267e3c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 502\", function () {",
									"    pm.response.to.have.status(502);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"502 Bad Gateway\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_url}}/3.0/weather?q={{Kiev}}{{api_id}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"3.0",
								"weather"
							],
							"query": [
								{
									"key": "q",
									"value": "{{Kiev}}{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Check xml format in response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c196d942-c95e-4e86-beb1-81e87e10cb8a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Content-Type is xml type\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"application/xml; charset=utf-8\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}&mode=xml&{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}&mode=xml&{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Check html format in response",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "045b1aac-c6d5-496c-b2df-c424cf50c5cd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Content-Type is html type\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Content-Type\")).equal(\"text/html; charset=utf-8\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}&mode=html&{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}&mode=html&{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Check default (standart = Kelvin) temperature unit format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e72d4a3-5ad9-460e-a0e3-f08b89be5d19",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('UA');",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include((pm.globals.get(\"Kiev\")));",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in kelvin temperature range\"] = (jsonResponse.main.temp >= 240 && jsonResponse.main.temp <= 310);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Check metric (Celsius) temperature unit format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7a13687-5518-4488-85f4-6981254aedd8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('UA');",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include((pm.globals.get(\"Kiev\")));",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}&units=metric{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}&units=metric{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Check imperial (Fahrenheit) temperature unit format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07514472-8641-4087-bc4e-02612b93c528",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include('UA');",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    pm.expect(pm.response.text()).to.include((pm.globals.get(\"Kiev\")));",
									"});",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in fahrenheit temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 110); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}&units=imperial{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}&units=imperial{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Accumulated weather data in free account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "744dc2d2-2476-4258-b690-0ad6e679a1ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "api.openweathermap.org/data/2.5/history/accumulated_temperature?id={{Mumbai_id}}&threshold=284&start=1505336400&end=1505941200{{api_id}}",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"2.5",
								"history",
								"accumulated_temperature"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Mumbai_id}}"
								},
								{
									"key": "threshold",
									"value": "284"
								},
								{
									"key": "start",
									"value": "1505336400"
								},
								{
									"key": "end",
									"value": "1505941200{{api_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Hourly historical data in free account by city id  (1275339)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "744dc2d2-2476-4258-b690-0ad6e679a1ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "history.openweathermap.org/data/2.5/history/city?id={{Mumbai_id}}&type=hour&{{api_id}}",
							"host": [
								"history",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"2.5",
								"history",
								"city"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Mumbai_id}}"
								},
								{
									"key": "type",
									"value": "hour"
								},
								{
									"key": "{{api_id}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12. 16 day / daily forecast in free account by city name (Kiev)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "744dc2d2-2476-4258-b690-0ad6e679a1ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "api.openweathermap.org/data/2.5/forecast/daily?q={{Kiev}},ua{{api_id}}",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"2.5",
								"forecast",
								"daily"
							],
							"query": [
								{
									"key": "q",
									"value": "{{Kiev}},ua{{api_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44227b27-1bdf-48a3-aafb-bd2629fe1844",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "55eba011-43a0-46e3-b654-ce8069496bc2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "9. End-to-end scenarios",
			"description": "This folder contains some end-to-end scenarios.",
			"item": [
				{
					"name": "1. Check current weather data in request by city name (Kiev)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d9b9d9-095e-4882-8a77-8b5517aa4999",
								"type": "text/javascript",
								"exec": [
									"// check structure response from server",
									"responseFromServer = [",
									"    \"coord\",",
									"    \"lon\",",
									"    \"lat\",",
									"    \"weather\",",
									"\t\"main\",",
									"    \"description\",",
									"\t\"icon\",",
									"\t\"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"\t\"temp_min\",",
									"\t\"temp_max\",",
									"\t\"visibility\",",
									"    \"wind\",",
									"    \"speed\",",
									"    \"clouds\",",
									"\t\"all\",",
									"    \"country\",",
									"    \"dt\",",
									"    \"sys\",",
									"    \"type\",\t",
									"\t\"message\",",
									"    \"country\",",
									"    \"sunrise\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"pm.test(\"Expected city lon coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
									"});",
									"",
									"pm.test(\"Expected city lat coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sys.country).to.eql('UA');",
									"});",
									"",
									"pm.test(\"Expected city id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
									"}); ",
									"",
									"pm.test(\"Expected city name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
									"});",
									"",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cd148fd-b0ff-4973-acea-c797116fee4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}}{{metric}}{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}}{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Check current weather data in request by city name, country code (Kiev,ua)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29ee8a54-259a-4e8d-8c6a-06f7a7a5a606",
								"type": "text/javascript",
								"exec": [
									"// check structure response from server",
									"responseFromServer = [",
									"    \"coord\",",
									"    \"lon\",",
									"    \"lat\",",
									"    \"weather\",",
									"\t\"main\",",
									"    \"description\",",
									"\t\"icon\",",
									"\t\"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"\t\"temp_min\",",
									"\t\"temp_max\",",
									"\t\"visibility\",",
									"    \"wind\",",
									"    \"speed\",",
									"    \"clouds\",",
									"\t\"all\",",
									"    \"country\",",
									"    \"dt\",",
									"    \"sys\",",
									"    \"type\",\t",
									"\t\"message\",",
									"    \"country\",",
									"    \"sunrise\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"pm.test(\"Expected city lon coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
									"});",
									"",
									"pm.test(\"Expected city lat coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sys.country).to.eql('UA');",
									"});",
									"",
									"pm.test(\"Expected city id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
									"}); ",
									"",
									"pm.test(\"Expected city name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
									"});",
									"",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}q={{Kiev}},ua{{metric}}{{api_id}}",
							"host": [
								"{{weather_url}}q={{Kiev}},ua{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Check current weather data in request by city id (Kiev id = 703448)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5b7743b-f220-4dc2-b728-c6a0cd387aa7",
								"type": "text/javascript",
								"exec": [
									"// check structure response from server",
									"responseFromServer = [",
									"    \"coord\",",
									"    \"lon\",",
									"    \"lat\",",
									"    \"weather\",",
									"\t\"main\",",
									"    \"description\",",
									"\t\"icon\",",
									"\t\"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"\t\"temp_min\",",
									"\t\"temp_max\",",
									"\t\"visibility\",",
									"    \"wind\",",
									"    \"speed\",",
									"    \"clouds\",",
									"\t\"all\",",
									"    \"country\",",
									"    \"dt\",",
									"    \"sys\",",
									"    \"type\",\t",
									"\t\"message\",",
									"    \"country\",",
									"    \"sunrise\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"pm.test(\"Expected city lon coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
									"});",
									"",
									"pm.test(\"Expected city lat coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sys.country).to.eql('UA');",
									"});",
									"",
									"pm.test(\"Expected city id is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.equal(parseInt(pm.globals.get(\"Kiev_id\")));",
									"}); ",
									"",
									"pm.test(\"Expected city name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.equal(pm.globals.get(\"Kiev\"));",
									"});",
									"",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}id={{Kiev_id}}{{metric}}{{api_id}}",
							"host": [
								"{{weather_url}}id={{Kiev_id}}{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Check current weather data in request by Kiev geographic coordinates (lat=50.43&lon=30.52)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8312a4c3-29ce-4757-a6bd-31ef70b1d9da",
								"type": "text/javascript",
								"exec": [
									"// check structure response from server",
									"responseFromServer = [",
									"    \"coord\",",
									"    \"lon\",",
									"    \"lat\",",
									"    \"weather\",",
									"\t\"main\",",
									"    \"description\",",
									"\t\"icon\",",
									"\t\"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"\t\"temp_min\",",
									"\t\"temp_max\",",
									"\t\"visibility\",",
									"    \"wind\",",
									"    \"speed\",",
									"    \"clouds\",",
									"\t\"all\",",
									"    \"country\",",
									"    \"dt\",",
									"    \"sys\",",
									"    \"type\",\t",
									"\t\"message\",",
									"    \"country\",",
									"    \"sunrise\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"pm.test(\"Expected city lat coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lat).to.eql(50.43);",
									"});",
									"",
									"pm.test(\"Expected city lon coordinate is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.coord.lon).to.eql(30.52);",
									"});",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sys.country).to.eql('UA');",
									"});",
									"",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}lat=50.43&lon=30.52{{metric}}{{api_id}}",
							"host": [
								"{{weather_url}}lat=50",
								"43&lon=30",
								"52{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Check current weather data in request by Kiev zip code, country (01032,ua)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aeff7a81-2cba-4498-a2d5-d1e5c1e8fa26",
								"type": "text/javascript",
								"exec": [
									"// check structure response from server",
									"responseFromServer = [",
									"    \"coord\",",
									"    \"lon\",",
									"    \"lat\",",
									"    \"weather\",",
									"\t\"main\",",
									"    \"description\",",
									"\t\"icon\",",
									"\t\"temp\",",
									"    \"pressure\",",
									"    \"humidity\",",
									"\t\"temp_min\",",
									"\t\"temp_max\",",
									"\t\"visibility\",",
									"    \"wind\",",
									"    \"speed\",",
									"    \"clouds\",",
									"\t\"all\",",
									"    \"country\",",
									"    \"dt\",",
									"    \"sys\",",
									"    \"type\",\t",
									"\t\"message\",",
									"    \"country\",",
									"    \"sunrise\"",
									"    ];",
									"    ",
									"for(var i in responseFromServer) {",
									"    result = responseBody.has(responseFromServer[i]);",
									"    tests[responseFromServer[i] + \" is present in response from server\"] = result;",
									"}",
									"",
									"pm.test(\"Expected country name is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sys.country).to.eql('UA');",
									"});",
									"",
									"",
									"var jsonResponse = JSON.parse(responseBody);",
									"",
									"tests[\"Current value temp '\" + jsonResponse.main.temp + \"' is in celsius temperature range\"] = (jsonResponse.main.temp >= -30 && jsonResponse.main.temp <= 35); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{weather_url}}zip=01032,ua{{metric}}{{api_id}}",
							"host": [
								"{{weather_url}}zip=01032,ua{{metric}}{{api_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b4b69eb1-79b7-4e12-ad53-26d2d5174550",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "10a64958-6635-4f2e-be29-560fcca3e845",
						"type": "text/javascript",
						"exec": [
							"tests[\"Response from server has time < 1200 ms\"] = responseTime < 1200;"
						]
					}
				}
			]
		}
	]
}